// Code generated by MockGen. DO NOT EDIT.
// Source: model.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockFloodControl is a mock of FloodControl interface.
type MockFloodControl struct {
	ctrl     *gomock.Controller
	recorder *MockFloodControlMockRecorder
}

// MockFloodControlMockRecorder is the mock recorder for MockFloodControl.
type MockFloodControlMockRecorder struct {
	mock *MockFloodControl
}

// NewMockFloodControl creates a new mock instance.
func NewMockFloodControl(ctrl *gomock.Controller) *MockFloodControl {
	mock := &MockFloodControl{ctrl: ctrl}
	mock.recorder = &MockFloodControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloodControl) EXPECT() *MockFloodControlMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockFloodControl) Check(ctx context.Context, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockFloodControlMockRecorder) Check(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockFloodControl)(nil).Check), ctx, userID)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCall mocks base method.
func (m *MockRepository) CreateCall(ctx context.Context, userID int64, limit time.Duration) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCall", ctx, userID, limit)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCall indicates an expected call of CreateCall.
func (mr *MockRepositoryMockRecorder) CreateCall(ctx, userID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCall", reflect.TypeOf((*MockRepository)(nil).CreateCall), ctx, userID, limit)
}
